"""
Alert Manager - Collects, stores, and manages real-time alerts generated by AI plugins.

Author: ItsOji Team
"""

from datetime import datetime
import time

class AlertManager:
    def __init__(self):
        self.active_alerts = []

    def add_alert(self, camera_id, plugin_name, detection_info, severity, timestamp=None):
        """
        Add a new active alert.
        :param camera_id: int
        :param plugin_name: str
        :param detection_info: str or dict
        :param severity: str (e.g., "High", "Critical")
        :param timestamp: str (optional)
        """
        if timestamp is None:
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")

        alert = {
            "timestamp": timestamp,
            "camera_id": camera_id,
            "plugin_name": plugin_name,
            "detection_info": detection_info,
            "severity": severity
        }
        self.active_alerts.append(alert)
        print(f"[AlertManager] 🔔 New alert added: {alert}")

    def get_active_alerts(self):
        """Return the list of active alerts."""
        return self.active_alerts

    def clear_alerts(self):
        """Clear all active alerts."""
        self.active_alerts.clear()
        print("[AlertManager] 🧹 All alerts cleared.")

    def acknowledge_alert(self, index):
        """
        Acknowledge and remove a specific alert by index.
        :param index: Index of the alert to remove.
        """
        if 0 <= index < len(self.active_alerts):
            removed_alert = self.active_alerts.pop(index)
            print(f"[AlertManager] ✅ Acknowledged and removed alert: {removed_alert}")
        else:
            print(f"[AlertManager] ⚠️ Invalid alert index: {index}")

    def handle_plugin_results(self, camera_id, plugin_results):
        """
        Process detection results and log as alerts if found.
        :param camera_id: ID of the camera that produced the results.
        :param plugin_results: Dictionary of plugin_name → result
        """
        for plugin_name, result in plugin_results.items():
            if result:
                detection_info = str(result)
                self.add_alert(camera_id, plugin_name, detection_info, severity="High")
